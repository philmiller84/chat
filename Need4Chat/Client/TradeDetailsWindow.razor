<h3>TradeDetailsWindow</h3>

<div>
    <p>Item List</p>

    <div>

        @if(showItemDetails == false)
        {
            <Button @onclick="() => showItemDetails = true">Add another item</Button>
        }
        else
        {
            <ItemDetailsWindow tradeClient="@tradeClient"></ItemDetailsWindow>
            <Button @onclick="() => showItemDetails = false">Hide item details</Button>
        }



        @foreach (var a in tradeDetails.userItemMap)
        {
            @foreach (var i in a.Value)
            {
                <div class="grid-container">
                    <div class="grid-column"> @(i.description) </div>
                    <div class="grid-column">
                        @if (i.userItemOffset > 0)
                        {<span>Supplying @(i.userItemOffset)</span> }
                        else
                        { <span>Need @(-i.userItemOffset)</span>}
                    </div>
                    <div class="grid-column"> @(tradeItemTotals[i]) needed for trade </div>
                    <div class="grid-column"> <button @onclick="@(e => UserChangedOffset(i, 1))">Increase</button> </div>
                    <div class="grid-column"> <button @onclick="@(e => UserChangedOffset(i, -1))">Decrease </button> </div>
                </div>
            }
        }
    </div>
</div>

@code {

    [Parameter]
    public TradeClient tradeClient { get; set; }
    [Parameter]
    public int tradeId { get; set; }


    bool showItemDetails = false;

    static List<ItemDetails> tradeItemDetails = new List<ItemDetails> {
        new ItemDetails {ID = "1", description = "Apples"},
        new ItemDetails {ID = "2", description = "Oranges"},
        new ItemDetails {ID = "3", description = "Pears"},
        new ItemDetails {ID = "4", description = "TP"},
        new ItemDetails {ID = "5", description = "Soap"},
    };

    static Dictionary<ItemDetails, int> tradeItemTotals = new Dictionary<ItemDetails, int>()
        {
            {tradeItemDetails[0], 5 },
            {tradeItemDetails[1], 4 },
            {tradeItemDetails[2], 3 },
            {tradeItemDetails[3], 2 },
            {tradeItemDetails[4], 1 },
        };

    TradeDetails tradeDetails = new TradeDetails
    {
        userItemMap = new Dictionary<UserInfo, List<ItemDetails>>() { { new UserInfo { Username = "Phil", ID = "1" }, tradeItemDetails } }
    };


    async Task UserChangedOffset(ItemDetails item, int val)
    {
        item.userItemOffset += val;

        // send message to hub
        //await client.SendAsync(newTradeMessage);

        StateHasChanged();
    }

}
