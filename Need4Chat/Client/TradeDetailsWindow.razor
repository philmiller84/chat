@using Need4Chat.Client;
<style>

    .tradeItemOption {
        text-decoration: underline;
        cursor: pointer;
    }
    .tradeItemDescription {
        background-color:antiquewhite;
        cursor: pointer;
    }

</style>
<h3>TradeDetailsWindow</h3>

<div>
    <p>Item List</p>

    <div>

        <div class="grid-container">
            <div class="grid-column"><Button @onclick="() => SwitchPane(TradeDetailsPane.ITEM_ENTRY)">Show item entry form</Button></div>
            <div class="grid-column"><Button @onclick="async () => { await tradeClient.GetAvailableItems();  SwitchPane(TradeDetailsPane.AVAILABLE_ITEMS); }">Select Items to Trade</Button></div>
            <div class="grid-column"><Button @onclick="() => SwitchPane(TradeDetailsPane.CURRENT_TRADE)">Show current trade</Button></div>
        </div>


        @if (showTradeDetailsPane[(int)TradeDetailsPane.ITEM_ENTRY]) 
        {
            <ItemDetailsWindow tradeClient="@tradeClient"></ItemDetailsWindow>
        }

        @if (showTradeDetailsPane[(int)TradeDetailsPane.AVAILABLE_ITEMS])
        {
            @foreach (var i in availableItems)
            {
                <div class="grid-container">
                    <div class="tradeItemDescription grid-column">@i.description</div>
                    <div class="tradeItemOption grid-column" @onclick="() => { ChangeUserItemMap(currentUser, i, UserItemMapChange.ADD);  } "> Add to Trade </div>
                    <div class="tradeItemOption grid-column" @onclick="() => { ChangeUserItemMap(currentUser, i, UserItemMapChange.DELETE); } "> Remove from Trade</div>
                </div>
            }
        }

        @if(showTradeDetailsPane[(int)TradeDetailsPane.CURRENT_TRADE])
        {
        @foreach (var a in tradeDetails.userItemMap)
        {
            @foreach (var i in a.Value)
            {
                <div class="grid-container">
                    <div class="grid-column"> @(i.description) </div>
                    <div class="grid-column">
                        @if (i.userItemOffset > 0)
                        {<span>Supplying @(i.userItemOffset)</span> }
                        else
                        { <span>Need @(-i.userItemOffset)</span>}
                    </div>
                    <div class="grid-column"> @(tradeItemTotals[i]) needed for trade </div>
                    <div class="grid-column"> <button @onclick="@(() => i.userItemOffset += 1)">Supply +1</button> </div>
                    <div class="grid-column"> <button @onclick="@(() => i.userItemOffset -= 1)">Need   +1 </button> </div>
                </div>
            }
        }
        }
    </div>
</div>

@code {

    enum UserItemMapChange {ADD, DELETE };
    enum TradeDetailsPane {ITEM_ENTRY = 0, AVAILABLE_ITEMS, CURRENT_TRADE};
    static bool[] showTradeDetailsPane = { false, false, false };

    [Parameter]
    public TradeClient tradeClient { get; set; }
    [Parameter]
    public int tradeId { get; set; }

    static UserInfo currentUser = new UserInfo { Username = "Phil", ID = "1" };

    Dictionary<ItemDetails, bool> showItemOptions = new Dictionary<ItemDetails, bool>();
    List<ItemDetails> availableItems = new List<ItemDetails>();

    static List<ItemDetails> tradeItemDetails = new List<ItemDetails> {
        new ItemDetails {ID = "1", description = "Apples"},
        new ItemDetails {ID = "2", description = "Oranges"},
        new ItemDetails {ID = "3", description = "Pears"},
        new ItemDetails {ID = "4", description = "TP"},
        new ItemDetails {ID = "5", description = "Soap"},
    };

    static Dictionary<ItemDetails, int> tradeItemTotals = new Dictionary<ItemDetails, int>()
        {
            {tradeItemDetails[0], 5 },
            {tradeItemDetails[1], 4 },
            {tradeItemDetails[2], 3 },
            {tradeItemDetails[3], 2 },
            {tradeItemDetails[4], 1 },
        };

    TradeDetails tradeDetails = new TradeDetails
    {
        userItemMap = new Dictionary<UserInfo, List<ItemDetails>>() { { currentUser, tradeItemDetails } }
    };

    async Task UserChangedOffset(ItemDetails item, int val)
    {
        item.userItemOffset += val;

        // send message to hub
        //await client.SendAsync(newTradeMessage);
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {

        tradeClient.ItemPicklistChangeReceived += PicklistReceived;
    }

    void PicklistReceived(object sender, ItemPicklistChangeReceivedEventArgs e)
    {
        availableItems = new List<ItemDetails>(e.itemEventArgs);
        foreach(var i in availableItems)
        {
            showItemOptions[i] = false;
        }
        StateHasChanged();
    }

    void ChangeUserItemMap(UserInfo u, ItemDetails i, UserItemMapChange e)
    {
        if(e == UserItemMapChange.ADD && !tradeDetails.userItemMap[u].Contains(i))
        {

            tradeDetails.userItemMap[u].Add(i);
            tradeItemTotals[i] = 0;

        }
        else if (e == UserItemMapChange.DELETE && tradeDetails.userItemMap[u].Contains(i))
        {
            tradeDetails.userItemMap[u].Remove(i);
        }

        StateHasChanged();
    }

    void SwitchPane(TradeDetailsPane pane)
    {
        for(int p = 0; p < showTradeDetailsPane.Length; p++)
        {
            showTradeDetailsPane[(int)p] = (int)pane == p;
        }
    }
}

