@inject NavigationManager navigationManager

<style>
    .chat-window {
        overflow: auto;
        display: flex;
        flex-direction: column-reverse;
        background-color:lightcyan;
    }

    .form-footer {
        min-height: 10vh;
        width:100%
    }
    .query-input {
        width:100%
    }

</style>

<div class="row chat-window">
    @for (int i = messages.Count - 1; i >= 0; i--)
    {
        <ChatMessageComponent chatMessage="@messages[i]"/>
    }
</div>
<div class="row h-25 align-items-end">
    <form class="form-footer" @onsubmit="@SendAsync">
        <input class="query-input" placeholder="Type something and press enter" @bind="@newChatMessage.Body">
    </form>
</div>


@code {

    // name of the user who will be chatting
    [Parameter]
    public string Username { get; set; }

    ChatClient client = null;

    // on-screen message
    string message = String.Empty;

    // new message input
    ChatMessage newChatMessage = null;

    // list of messages in chat
    List<ChatMessage> messages = new List<ChatMessage>();

    string latestMessageID = String.Empty;


    /// <summary>
    /// Start chat client
    /// </summary>
    async Task Chat()
    {
        // check username is valid
        //if (string.IsNullOrWhiteSpace(username))
        //{
        //	message = "Please enter a name";
        //	return;
        //};

        try
        {
            // remove old messages if any
            messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            newChatMessage = new ChatMessage() { Username = Username, Mine = true, DateAndTime = DateTime.Now };

            client = new ChatClient(Username, baseUrl);

            // add an event handler for incoming messages
            client.MessageReceived += MessageReceived;

            // start the client
            Console.WriteLine("Index: chat starting...");

            await client.StartAsync();
            Console.WriteLine("Index: chat started?");
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await Chat();
    }

    public bool HasLink(string message)
    {
        return message.Contains("http");
    }

    /// <summary>
    /// Inbound message
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
        bool isMine = false;
        if (!string.IsNullOrWhiteSpace(e.Username))
        {
            isMine = string.Equals(e.Username, Username, StringComparison.CurrentCultureIgnoreCase);
        }

        var newMsg = new ChatMessage() { Username = e.Username, Body = e.Message, Mine = isMine, DateAndTime = e.Timestamp };


        messages.Add(newMsg);


        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task DisconnectAsync()
    {
        await client.StopAsync();
        client = null;
        message = "chat ended";
    }

    async Task SendAsync()
    {
        if (!string.IsNullOrWhiteSpace(newChatMessage.Body))
        {
            // send message to hub
            await client.SendAsync(newChatMessage);

            // clear input box
            newChatMessage.Body = string.Empty;
        }
    }

}