@page "/trade"
@inject NavigationManager navigationManager

<style>
    .grid-container {
        display: grid;
        /*grid-auto-flow: row;*/
        grid-template-columns: 100px 150px 150px 150px 150px;
    }

</style>

<h3>Trades</h3>

<div>

</div>

<div>
    @if (showTradeDetails == false)
    {
        @foreach (var t in availableTrades)
        {
            <Button @onclick="() => ShowTrade(t.ID)">Open trade @t.ID</Button>
        }

        <Button @onclick="GetNewTradeId"> Start New Trade </Button>
    }
    else
    {
        <TradeDetailsWindow tradeClient="@client" tradeId="@tradeId"></TradeDetailsWindow>
        <Button @onclick="HideTradeDetails"> Hide Trade</Button>
    }


</div>


<Link To="/"> Go to chat </Link>


@code {


    int tradeId = 0;
    bool showTradeDetails = false;
    TradeClient client = null;

    String Username = "tester";
    String message = string.Empty;

    List<TradeDetails> availableTrades = new List<TradeDetails> { new TradeDetails { ID = 1 } };

    TradeDetails selectedTrade = null;

    TradeMessage newTradeMessage;


    /// <summary>
    /// Start chat client
    /// </summary>
    async Task Trade()
    {
        // check username is valid
        //if (string.IsNullOrWhiteSpace(username))
        //{
        //	message = "Please enter a name";
        //	return;
        //};

        try
        {
            //// remove old messages if any
            //messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            //newTradeMessage = new TradeMessage() { Username = Username, Mine = true, DateAndTime = DateTime.Now };

            client = new TradeClient(Username, baseUrl);

            //// add an event handler for incoming messages
            //client.MessageReceived += MessageReceived;
            //client.BulkMessagesReceived += BulkMessagesReceived;


            // start the client
            Console.WriteLine("Index: trade starting...");

            await client.StartAsync();
            Console.WriteLine("Index: trade started?");
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start trade client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Trade();
    }


    /// <summary>
    /// Inbound message
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        //ProcessMessageEvent(e);

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    async Task GetNewTradeId()
    {
        await client.RequestNewTradeId(ref tradeId);
        if (tradeId > 0)
        {
            showTradeDetails = true;
            StateHasChanged();
        }
    }


    async Task ShowTrade(int tradeId)
    {
        // lookup trade
        showTradeDetails = true;
        StateHasChanged();
    }

    async Task HideTradeDetails()
    {
        showTradeDetails = false;
        StateHasChanged();
    }

}

