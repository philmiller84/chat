@page "/trade"
@using Need4Chat.Shared
@inject NavigationManager navigationManager

<style>
    .grid-container {
        display: grid;
        /*grid-auto-flow: row;*/
        grid-template-columns: repeat(5, [col-start] auto [col-end]);
    }
    }

</style>

<h3>Trades</h3>


<div>
    <p>Item List</p>

    <div>
        @foreach (var a in tradeDetails.userItemMap)
        {
            @foreach (var i in a.Value)
            {
                <div class="grid-container">
                    <div class="grid-column"> @(i.ID) - @(i.description) </div>
                    <div class="grid-column"> @if (i.tradeOffset > 0) { <span>Supplying @(i.tradeOffset)</span> } else { <span>Need @(-i.tradeOffset)</span> } </div>

                    <div class="grid-column"> @(tradeItemTotals[i]) needed for trade </div>

                    <div class="grid-column"> <button @onclick="@(() => i.tradeOffset++)">Increase</button> </div>
                    <div class="grid-column"> <button @onclick="@(() => i.tradeOffset--)">Decrease </button> </div>
                </div> 
            }
        }
    </div>
</div>

<Link To="/"> Go to chat </Link>


@code {

    TradeClient client = null;

    String Username = "tester";
    String message = string.Empty;


    static List<ItemDetails> tradeItemDetails = new List<ItemDetails> {
        new ItemDetails {ID = "1", description = "Apples"},
        new ItemDetails {ID = "2", description = "Oranges"},
        new ItemDetails {ID = "3", description = "Pears"},
        new ItemDetails {ID = "4", description = "TP"},
        new ItemDetails {ID = "5", description = "Soap"},
    };

    static Dictionary<ItemDetails, int> tradeItemTotals = new Dictionary<ItemDetails, int>()
        {
            {tradeItemDetails[0], 5 },
            {tradeItemDetails[1], 4 },
            {tradeItemDetails[2], 3 },
            {tradeItemDetails[3], 2 },
            {tradeItemDetails[4], 1 },
        };

    TradeDetails tradeDetails = new TradeDetails
    {
        userItemMap = new Dictionary<UserInfo, List<ItemDetails>>() { { new UserInfo { Username = "Phil", ID = "1" }, tradeItemDetails } }
    };

    /// <summary>
    /// Start chat client
    /// </summary>
    async Task Trade()
    {
        // check username is valid
        //if (string.IsNullOrWhiteSpace(username))
        //{
        //	message = "Please enter a name";
        //	return;
        //};

        try
        {
            //// remove old messages if any
            //messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            //newTradeMessage = new TradeMessage() { Username = Username, Mine = true, DateAndTime = DateTime.Now };

            client = new TradeClient(Username, baseUrl);

            //// add an event handler for incoming messages
            //client.MessageReceived += MessageReceived;
            //client.BulkMessagesReceived += BulkMessagesReceived;

            // start the client
            Console.WriteLine("Index: trade starting...");

            await client.StartAsync();
            Console.WriteLine("Index: trade started?");
        }
        catch (Exception e)
        {
            message = $"ERROR: Failed to start trade client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Trade();
    }

}
