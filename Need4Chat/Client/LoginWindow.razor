@inject NavigationManager navigationManager


<h3>LoginWindow</h3>

<div>
    <p>Enter your login information</p>


    <Fields>
        <Field ColumnSize="ColumnSize.IsThird"> <FieldLabel>Username</FieldLabel> </Field>
        <Field ColumnSize="ColumnSize.IsThird"> <FieldLabel>Password</FieldLabel> </Field>
    </Fields>
    <Fields>
        <Field ColumnSize="ColumnSize.IsThird"> <TextEdit @bind-Text="@userLoginInfo.Username" /> </Field>
        <Field ColumnSize="ColumnSize.IsThird"> <TextEdit Role="TextRole.Password" @bind-Text="@userLoginInfo.Password" /> </Field>
        <Field ColumnSize="ColumnSize.IsThird"> <Button @onclick="@TryLogin" Color="Color.Primary">Login</Button> </Field>
    </Fields>


</div>

<Accordion>
    <Collapse Visible="@collapse1Visible">
        <CollapseHeader>
            <Heading Size="HeadingSize.Is5">
                <Button Clicked="@(()=>collapse1Visible = !collapse1Visible)">Registered users:</Button>
            </Heading>
        </CollapseHeader>
        <CollapseBody>
            <div class="custom-control custom-radio">
                @for (int i = users.Count - 1; i >= 0; i--)
				{
                <div>
                    <input type="radio" class="custom-control-input" name="question1" id="@users[i].Username" value="@users[i].Username" @onchange="SelectionChanged" checked=@(selectedAnswer.Equals(@users[i].Username,StringComparison.OrdinalIgnoreCase)) />
                    <label class="custom-control-label" for="@users[i].Username">@users[i].Username</label>
                </div>
		        }
            </div>
        </CollapseBody>
    </Collapse>
</Accordion>
   
<div>@message</div>

@code{
    
	string selectedAnswer = String.Empty;

	void SelectionChanged(ChangeEventArgs args)
    {
         userLoginInfo.Username= args.Value.ToString();
    }

    bool collapse1Visible = false;

	List<LoginInfo> users = new List<LoginInfo>() ;

	LoginInfo userLoginInfo = new LoginInfo();


	LoginClient client = null;


	string message = String.Empty;

	[Parameter] public Action<string> OnAuthenticationChange { get; set; }

	private void SetChatting()
	{
		OnAuthenticationChange?.Invoke(userLoginInfo.Username);
	}

	async Task TryLogin()
	{

		if (string.IsNullOrWhiteSpace(userLoginInfo.Username))
		{
			message = "Please enter a name";
			return;
		}
		else
		{
			message = "You attempted to login as '" + userLoginInfo.Username + "'";
		}

		// send message to hub
		await client.SendAsync(userLoginInfo);
	}

	bool IsAuthenticated(string message)
	{
		return message == "User logged in";
	}

	/// <summary>
	/// Inbound message
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="e"></param>
	void LoginMessageReceived(object sender, LoginReceivedEventArgs e)
	{
		Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
		message = e.Message;


		// Inform blazor the UI needs updating
		StateHasChanged();

		System.Threading.Thread.Sleep(1500);

		if (IsAuthenticated(e.Message))
		{
			SetChatting();
			StateHasChanged();
		}
	}


	/// <summary>
	/// Inbound message
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="e"></param>
	void MessageReceived(object sender, LoginReceivedEventArgs e)
	{
		Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");

		var newMsg = new LoginInfo { Username = e.Username };
		if (users.Find(x => { return x.Username == newMsg.Username; }) == null)
			users.Add(newMsg);

		// Inform blazor the UI needs updating
		StateHasChanged();
	}


	async Task Login()
	{
		try
		{
			// remove old messages if any
			users.Clear();

			// Create the chat client
			string baseUrl = navigationManager.BaseUri;

			client = new LoginClient("guest", baseUrl);

			// add an event handler for incoming messages
			client.LoginMessageReceived += LoginMessageReceived;
			client.MessageReceived += MessageReceived;
			// start the client
			Console.WriteLine("Index: login starting...");
			await client.StartAsync();
			Console.WriteLine("Index: login started?");
		}
		catch (Exception e)
		{
			message = $"ERROR: Failed to start login client: {e.Message}";
			Console.WriteLine(e.Message);
			Console.WriteLine(e.StackTrace);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Login();
	}
}
